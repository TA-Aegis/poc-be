name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - main
      - staging
  pull_request:
    branches:
      - master
      - main
      - staging
    types: [closed]

env:
  PROJECT_NAME: ${{ github.event.repository.name }}
  PORT: 8080
  VERSION: ${{ github.sha }}
  BRANCH: ${{ github.ref == 'refs/heads/staging' && 'staging' || 'production' }}

jobs:
  setup-environment:
    if: github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.set-env.outputs.IMAGE_TAG }}
      ENVIRONMENT: ${{ steps.set-env.outputs.ENVIRONMENT }}
    steps:
      - name: Set environment variables
        id: set-env
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "::set-output name=IMAGE_TAG::${{ env.BRANCH }}:$SHORT_SHA"
          echo "::set-output name=BRANCH::${{ env.BRANCH }}"

  dockerize-and-push-do:
    needs: setup-environment
    if: vars.CLOUD_PLATFORM == 'do'
    environment: staging
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.set-env.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pass env
        id: set-env
        run: |
          echo "::set-output name=IMAGE_TAG::${{ needs.setup-environment.outputs.IMAGE_TAG }}"
          echo "::set-output name=BRANCH::${{ env.BRANCH }}"

      - name: Create secret
        run: |
          echo "${{ vars.ENV }}" > ./.env
          cat ./.env

      - name: Build and push Docker image
        run: |
          IMAGE_NAME="reyshazni/${{ github.event.repository.name }}-${{ needs.setup-environment.outputs.IMAGE_TAG }}"
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME
        env:
          IMAGE_TAG: ${{ needs.setup-environment.outputs.IMAGE_TAG }}

  dockerize-and-push-gcp:
    needs: setup-environment
    if: vars.CLOUD_PLATFORM == 'gcp'
    environment: ${{ needs.dockerize-and-push-do.outputs.BRANCH }}
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.set-env.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pass env
        id: set-env
        run: |
          echo "::set-output name=IMAGE_TAG::${{ needs.setup-environment.outputs.IMAGE_TAG }}"
          echo "::set-output name=BRANCH::${{ env.BRANCH }}"

      - name: Create secret
        run: |
          echo "${{ vars.ENV }}" > ./.env
          cat ./.env
  
  dockerize-and-push-aws:
    needs: setup-environment
    if: vars.CLOUD_PLATFORM == 'aws'
    environment: ${{ needs.dockerize-and-push-do.outputs.BRANCH }}
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.set-env.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pass env
        id: set-env
        run: |
          echo "::set-output name=IMAGE_TAG::${{ needs.setup-environment.outputs.IMAGE_TAG }}"
          echo "::set-output name=BRANCH::${{ env.BRANCH }}"

      - name: Create secret
        run: |
          echo "${{ vars.ENV }}" > ./.env
          cat ./.env

  dockerize-and-push-azure:
    needs: setup-environment
    if: vars.CLOUD_PLATFORM == 'azure'
    environment: ${{ needs.dockerize-and-push-do.outputs.BRANCH }}
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.set-env.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pass env
        id: set-env
        run: |
          echo "::set-output name=IMAGE_TAG::${{ needs.setup-environment.outputs.IMAGE_TAG }}"
          echo "::set-output name=BRANCH::${{ env.BRANCH }}"

      - name: Create secret
        run: |
          echo "${{ vars.ENV }}" > ./.env
          cat ./.env

  deploy-to-server-do:
    needs: dockerize-and-push-do
    if: vars.CLOUD_PLATFORM == 'do'
    runs-on: ubuntu-latest
    environment: ${{ needs.dockerize-and-push-do.outputs.BRANCH }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Prepare deployment file
        run: |
          IMAGE_TAG=${{ needs.dockerize-and-push-do.outputs.IMAGE_TAG }}
          SHORT_SHA=$(echo "$IMAGE_TAG" | cut -d':' -f2)
          sed -i "s|<PROJECT_NAME>|${{ env.PROJECT_NAME }}|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<IMAGE_NAME>|reyshazni/${{ github.event.repository.name }}-$IMAGE_TAG|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<VERSION>|$SHORT_SHA|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<PORT>|${{ env.PORT }}|g" k8s/${{ env.BRANCH }}.yml
          cat k8s/${{ env.BRANCH }}.yml

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ vars.DO_PAK }}

      - name: Connect to cluster
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ vars.DO_CLUSTER_NAME }}

      - name: Deploy
        run: |
          kubectl apply -f k8s/${{ env.BRANCH }}.yml

  deploy-to-server-gcp:
    needs: dockerize-and-push-gcp
    if: vars.CLOUD_PLATFORM == 'gcp'
    runs-on: ubuntu-latest
    environment: ${{ needs.dockerize-and-push-gcp.outputs.BRANCH }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Prepare deployment file
        run: |
          IMAGE_TAG=${{ needs.dockerize-and-push-gcp.outputs.IMAGE_TAG }}
          SHORT_SHA=$(echo "$IMAGE_TAG" | cut -d':' -f2)
          sed -i "s|<PROJECT_NAME>|${{ env.PROJECT_NAME }}|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<IMAGE_NAME>|reyshazni/${{ github.event.repository.name }}-$IMAGE_TAG|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<VERSION>|$SHORT_SHA|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<PORT>|${{ env.PORT }}|g" k8s/${{ env.BRANCH }}.yml
          cat k8s/${{ env.BRANCH }}.yml

      - id: 'auth'
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ vars.GKE_SA_KEY }}

      - name: Connect to cluster
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ vars.GKE_CLUSTER }}
          location: asia-southeast1

      - name: Deploy
        run: |
          kubectl apply -f k8s/${{ env.BRANCH }}.yml

  deploy-to-server-aws:
    needs: dockerize-and-push-aws
    if: vars.CLOUD_PLATFORM == 'aws'
    runs-on: ubuntu-latest
    environment: ${{ needs.dockerize-and-push-aws.outputs.BRANCH }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Prepare deployment file
        run: |
          IMAGE_TAG=${{ needs.dockerize-and-push-aws.outputs.IMAGE_TAG }}
          SHORT_SHA=$(echo "$IMAGE_TAG" | cut -d':' -f2)
          sed -i "s|<PROJECT_NAME>|${{ env.PROJECT_NAME }}|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<IMAGE_NAME>|reyshazni/${{ github.event.repository.name }}-$IMAGE_TAG|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<VERSION>|$SHORT_SHA|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<PORT>|${{ env.PORT }}|g" k8s/${{ env.BRANCH }}.yml
          cat k8s/${{ env.BRANCH }}.yml

  deploy-to-server-azure:
    needs: dockerize-and-push-azure
    if: vars.CLOUD_PLATFORM == 'azure'
    runs-on: ubuntu-latest
    environment: ${{ needs.dockerize-and-push-azure.outputs.BRANCH }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Prepare deployment file
        run: |
          IMAGE_TAG=${{ needs.dockerize-and-push-azure.outputs.IMAGE_TAG }}
          SHORT_SHA=$(echo "$IMAGE_TAG" | cut -d':' -f2)
          sed -i "s|<PROJECT_NAME>|${{ env.PROJECT_NAME }}|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<IMAGE_NAME>|reyshazni/${{ github.event.repository.name }}-$IMAGE_TAG|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<VERSION>|$SHORT_SHA|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<PORT>|${{ env.PORT }}|g" k8s/${{ env.BRANCH }}.yml
          cat k8s/${{ env.BRANCH }}.yml