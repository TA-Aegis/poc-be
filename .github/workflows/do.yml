name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - staging
  pull_request:
    branches:
      - master
      - staging
    types: [closed]

env:
  PROJECT_NAME: ${{ github.event.repository.name }}
  PORT: 8080
  VERSION: ${{ github.sha }}

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.set-env.outputs.IMAGE_TAG }}
      BRANCH: ${{ steps.set-env.outputs.BRANCH }}
      ENVIRONMENT: ${{ steps.set-env.outputs.ENVIRONMENT }}
    steps:
      - name: Set environment variables
        id: set-env
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "::set-output name=IMAGE_TAG::production:$SHORT_SHA"
            echo "::set-output name=BRANCH::production"
            echo "::set-output name=ENVIRONMENT::production"
          else
            echo "::set-output name=IMAGE_TAG::staging:$SHORT_SHA"
            echo "::set-output name=BRANCH::staging"
            echo "::set-output name=ENVIRONMENT::staging"
          fi

  dockerize-and-push:
    needs: setup-environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          IMAGE_NAME="reyshazni/${{ github.event.repository.name }}-${{ needs.setup-environment.outputs.IMAGE_TAG }}"
          docker build --platform linux/amd64 -t $IMAGE_NAME .
          docker push $IMAGE_NAME
        env:
          IMAGE_TAG: ${{ needs.setup-environment.outputs.IMAGE_TAG }}

  deploy-to-do:
    needs: [setup-environment, dockerize-and-push]
    runs-on: ubuntu-latest
    environment: ${{ needs.setup-environment.outputs.ENVIRONMENT }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Prepare deployment file
        run: |
          BRANCH=${{ needs.setup-environment.outputs.BRANCH }}
          IMAGE_TAG=${{ needs.setup-environment.outputs.IMAGE_TAG }}
          SHORT_SHA=$(echo "$IMAGE_TAG" | cut -d':' -f2)
          sed -i "s|<PROJECT_NAME>|${{ env.PROJECT_NAME }}|g" k8s/$BRANCH.yml
          sed -i "s|<IMAGE_NAME>|reyshazni/${{ github.event.repository.name }}-$IMAGE_TAG|g" k8s/$BRANCH.yml
          sed -i "s|<VERSION>|$SHORT_SHA|g" k8s/$BRANCH.yml
          sed -i "s|<PORT>|${{ env.PORT }}|g" k8s/$BRANCH.yml
          cat k8s/$BRANCH.yml

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ vars.DO_PAK }}

      - name: Connect to cluster
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ vars.DO_CLUSTER_NAME }}

      - name: Create secret and apply changes
        run: |
          echo "${{ vars.ENV }}" > ./.env
          kubectl create secret generic ${{ env.PROJECT_NAME }}.env -n ${{ needs.setup-environment.outputs.BRANCH }} --from-env-file=./.env -o yaml --dry-run=client | kubectl apply -f -
          kubectl apply -f k8s/${{ needs.setup-environment.outputs.BRANCH }}.yml
